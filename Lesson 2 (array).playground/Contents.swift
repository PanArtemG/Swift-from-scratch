import UIKit



//var someInts: Array<Int>
//var someInts: [Int] = []
//var someInts= [1, 2, 5, 6]
var someInts =  [Int]()

someInts.append(3)
someInts.count


someInts = [] // clear array

var threeDoubles = Array(repeating: 0.0, count: 3) // [0, 0, 0]
var anotherThreeDoubles = Array(repeating: 2.5, count: 3)

var sixDoubles = threeDoubles + anotherThreeDoubles // concat arrays

//!!! –°hanges array

var shoppingList = ["Eggs", "Milk"]
shoppingList.append("Apple")
shoppingList += ["Meat", "Orange", "Chokolad"]

// isEmpty return Bool
// .count return length

let firstItem = shoppingList[0]

shoppingList[0] = "Lime"

shoppingList[3...5] = ["Bannas", "Potate"] // replase range
shoppingList.insert("Water", at: 0) // replace element

let water = shoppingList.remove(at: 0)
let removeLast = shoppingList.removeLast()


//!!! Iterate over the array

//for item in shoppingList {
//    print(item)
//}

for (i, value) in shoppingList.enumerated() {
    print("\(i + 1). \(value)")
}

//!!! Sets

//var favorite = Set<String>()
//var favorite: Set<String> = []
var favorite: Set = ["Rock", "Classical"]

favorite.insert("Hip Hop")
favorite

favorite.count
favorite.isEmpty

favorite.insert("Jas")


// remove

if let removedItem = favorite.remove("Rock2") {
    print("Remove \(removedItem)")
} else {
    print("Not found")
}

if favorite.contains("Funk") {
    print("YES")
} else {
    print("NO")
}

for genre in favorite.sorted() { // return array
    print(genre)
}

let arrFavorite = favorite.sorted()

//!!! Operation at Sets


let oddDigits: Set = [1, 3, 5, 7, 9]
let singlePrimeDigits: Set = [2, 3, 5, 7]

// intersection - –ø–µ—Ä–µ—Å–µ—á–µ–Ω–µ–µ (–º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Set —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ—Ö –µ–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –æ–±–µ–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ö)
oddDigits.intersection(singlePrimeDigits) // {5, 3, 7}

// symmetricDifference - —Å–∏–º–µ—Ç—Ä–∏—á–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å (–º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Set —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ—Ö –µ–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –≤ –æ–±–µ–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ö)
oddDigits.symmetricDifference(singlePrimeDigits) // {1, 9, 2}

// union - –æ–±—å–µ–¥–∏–Ω–µ–Ω–∏–µ
oddDigits.union(singlePrimeDigits) // {9, 2, 1, 3, 5, 7}

// subtracting - —Ä–∞–∑–Ω–æ—Å—Ç—å(–≤—ã—á–∏—Ç–∞–Ω–∏–µ) c –ø–µ—Ä–≤–æ–≥–æ Set —É–±–∏—Ä–∞–µ–º –≤—Å–µ —á—Ç–æ –µ—Å—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–º
oddDigits.subtracting(singlePrimeDigits) // {1, 9}

// isSubset –∏ —Å—É–ø–µ—Ä–º–Ω–æ–∂–µ—Å—Ç–≤–∞
let houseAnimals: Set = ["üê∂", "üê±"]
let farmAnimals: Set = ["üêÆ", "üêî", "üê∂", "üêë", "üê±"]
let cityAnimals: Set = ["üê≠", "üê¶"]

houseAnimals.isSubset(of: farmAnimals) // true - isSubset —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º
farmAnimals.isSuperset(of: houseAnimals) // true - isSuperset —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º (–≤ –Ω–µ–º –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∂–µ –µ–ª–µ–º–µ–Ω—Ç—ã –∏ –¥—Ä—É–≥–∏–µ)
farmAnimals.isDisjoint(with: cityAnimals) // true - isDisjoint –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–∞–∫–∏—Ö –∂–µ –∞–π—Ç–µ–º–æ–≤

//!! Dictionary

//let namesOfIntegers: Dictionary<Int, String>
//var airports: [String: String] = ["YYZ": "Toronto", "DUB": "Dublin"]

var namesOfIntegers = [Int: String]()

namesOfIntegers[16] = "sixteen" // add new element

namesOfIntegers = [:] // clear dictionary
var airports: [String: String] = ["YYZ": "Toronto", "DUB": "Dublin"]
airports["LHR"] = "London" // create ["LHR"] = "London"

airports["LHR"] = "London Heathrow" //chanche value ["LHR"] = "London"

// change val and return old val
if let oldVal = airports.updateValue("Duplin AIR", forKey: "DUB") {
    print(oldVal)
}

// remove element
airports["DUB"] = nil

airports

// Iteration in dictionary

for (key, val) in airports {
    print("\(key) \(val)")
}

// only keys
for key in airports.keys {
    print("\(key)")
}

// only val
for val in airports.values{
    print("\(val)")
}

//  create arr key dictionary
let airportCodes = [String](airports.keys)
airportCodes
